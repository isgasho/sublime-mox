%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - mox
scope: source.mox

variables:
  ident: \b[[:alpha:]_][[:alnum:]_]*\b

  # Only for single-line lookahead.
  inline_comment: /[*](?:[^*]|[*](?!/))*[*]/

  # Whitespace and block comments on a single line.
  # This should only be used for lookahead, not for capturing / scoping.
  noise: (?:\s|{{inline_comment}})*

  exponent: '[Ee][+-]?'

  char_escape: \\x\h{2}|\\u\h{4}|\\U\h{8}|\\[0-7]{3}|\\.

  heading: '#+\s*.*\w'

contexts:
  prototype:
    - include: match-comments

  main:
    - include: match-numbers
    - include: match-chars
    - include: match-strings
    - include: match-keywords
    - include: match-idents
    - include: match-operators
    - include: match-punctuation

  match-numbers:
    - include: match-floats
    - include: match-integers

  match-floats:
    - include: match-floats-without-fraction
    - include: match-floats-with-fraction

  match-floats-without-fraction:
    - match: \d+({{exponent}})\d+
      scope: constant.numeric.float.mox
      captures:
        1: punctuation.separator.exponent.mox

  match-floats-with-fraction:
    - match: \d+(\.)\d+(?:({{exponent}})\d+)?
      scope: constant.numeric.float.mox
      captures:
        1: punctuation.separator.decimal.mox
        2: punctuation.separator.exponent.mox

  match-integers:
    - include: match-integers-bin
    - include: match-integers-oct
    - include: match-integers-hex
    - include: match-integers-dec

  match-integers-bin:
    - match: (0b)[01]+(?=\D)
      scope: constant.numeric.binary.mox
      captures:
        1: punctuation.definition.numeric.binary.mox

  match-integers-oct:
    - match: (0o)[0-7]+(?=\D)
      scope: constant.numeric.octal.mox
      captures:
        1: punctuation.definition.numeric.octal.mox

  match-integers-hex:
    - match: (0[x])\h+
      scope: constant.numeric.hex.mox
      captures:
        1: punctuation.definition.numeric.hexadecimal.mox

  match-integers-dec:
    - match: \d+
      scope: constant.numeric.integer.mox

  match-chars:
    - match: \'[^']*'
      scope: constant.character.mox

  match-strings:
    - include: match-strings-double
    - include: match-strings-grave

  match-strings-double:
    - match: '"'
      scope: punctuation.definition.string.begin.mox
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.mox
        - match: '"'
          scope: punctuation.definition.string.end.mox
          pop: true
        - match: '{{char_escape}}'
          scope: constant.character.escape.mox

  match-strings-grave:
    - match: '`'
      scope: punctuation.definition.string.begin.mox
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.other.mox
        - match: '`'
          scope: punctuation.definition.string.end.mox
          pop: true

  # TODO reconsider delimiters. Note that supporting nested comments requires
  # opening and closing delimiters to differ.
  match-comments:
    - match: '(\(\()\s*({{heading}})'
      captures:
        1: punctuation.definition.comment.begin.mox
        2: markup.heading.mox
      push: pop-comment
    - match: '\(\('
      scope: punctuation.definition.comment.begin.mox
      push: pop-comment

  pop-comment:
    - meta_scope: comment.block.mox
    - match: '\)\)'
      scope: punctuation.definition.comment.end.mox
      pop: true
    - match: '^({{heading}})'
      captures:
        1: markup.heading.mox
    - include: match-comments

  match-keywords:
    - include: match-bools
    - include: match-nil
    - include: match-self
    - include: match-fn
    - include: match-func

  match-bools:
    - match: \b(?:true|false)\b
      scope: constant.language.mox

  match-nil:
    - match: \bnil\b
      scope: constant.language.mox

  match-self:
    - match: \bself\b
      scope: constant.language.mox

  match-fn:
    - match: \bfn\b
      scope: storage.type.keyword.function.mox
      push: pop-fn-0

  pop-fn-0:
    - match: \{
      scope: punctuation.section.braces.begin.mox
      set: pop-fn-1
    - include: pop-before-nonblank

  # Expecting maybe name, then params.
  pop-fn-1:
    - include: pop-on-brace-end
    - match: '{{ident}}'
      scope: entity.name.function.mox
      set: pop-fn-2
    - match: (?={)
      set: pop-fn-2
    - include: main

  # Expecting params.
  pop-fn-2:
    - include: pop-on-brace-end
    - match: \{
      scope: punctuation.section.braces.begin.mox
      set: pop-fn-3
    - include: main

  # Params.
  pop-fn-3:
    - match: \}
      scope: punctuation.section.braces.end.mox
      set: pop-fn-4
    - match: \bself\b
      scope: variable.parameter.mox constant.language.mox
    - match: '{{ident}}'
      scope: variable.parameter.mox
    - include: main

  pop-fn-4:
    - include: pop-on-brace-end
    - include: main

  match-func:
    - match: \bfunc\b
      scope: storage.type.keyword.function.mox
      push: pop-func-0

  pop-func-0:
    - match: \{
      scope: punctuation.section.braces.begin.mox
      set: pop-func-1
    - include: pop-before-nonblank

  # Expecting maybe name, then params.
  pop-func-1:
    - include: pop-on-brace-end
    - match: '{{ident}}'
      scope: entity.name.function.mox
      set: pop-func-2
    - match: (?={)
      set: pop-func-2
    - include: main

  # Expecting params.
  pop-func-2:
    - include: pop-on-brace-end
    - match: \{
      scope: punctuation.section.braces.begin.mox
      set: pop-func-3
    - include: main

  # Params.
  pop-func-3:
    - match: \}
      scope: punctuation.section.braces.end.mox
      set: pop-func-4
    - match: \bself\b
      scope: variable.parameter.mox constant.language.mox
      push: pop-type
    - match: '{{ident}}'
      scope: variable.parameter.mox
      push: pop-type
    - include: main

  # Expecting maybe return keyword and type, then body.
  pop-func-4:
    - include: pop-on-brace-end
    - match: '\bret\b'
      scope: storage.type.keyword.mox
      set: pop-func-6
    - match: (?=\S)
      set: pop-func-8

  # # Expecting return type, then body.
  # pop-func-5:
  #   - include: pop-on-brace-end
  #   - match: '{{ident}}'
  #     scope: storage.type.mox
  #     set: pop-func-6
  #   - match: (?=\S)
  #     set: pop-func-8

  # Expecting maybe return type's {}, then body.
  pop-func-6:
    - include: pop-on-brace-end
    - match: \{
      scope: punctuation.section.braces.begin.mox
      set: pop-func-7
    - match: (?=\S)
      set: pop-func-8

  pop-func-7:
    - match: \}
      scope: punctuation.section.braces.end.mox
      set: pop-func-8
    - include: match-types
    - include: main

  pop-func-8:
    - include: pop-on-brace-end
    - include: main

  # TODO consider Lisp-style symbol parsing where a symbol may include arbitrary
  # non-whitespace, non-punctuation symbols.
  match-idents:
    - match: \b_\b
      scope: variable.language.blank.mox
    - match: '{{ident}}(?={{noise}}\{)'
      scope: variable.function.mox
    - match: '{{ident}}'
      scope: variable.other.mox

  # We could technically detect an opening brace following an operator, and
  # additionally scope the operator as `variable.function.mox`. Not sure how to
  # do that without doubling the size of this definition.
  match-operators:
    - match: '\+='
      scope: keyword.operator.assignment.mox
    - match: '-='
      scope: keyword.operator.assignment.mox
    - match: '\*='
      scope: keyword.operator.assignment.mox
    - match: '/='
      scope: keyword.operator.assignment.mox
    - match: '%='
      scope: keyword.operator.assignment.mox
    - match: '&='
      scope: keyword.operator.assignment.mox
    - match: '^='
      scope: keyword.operator.assignment.mox
    - match: \+
      scope: keyword.operator.mox
    - match: \-
      scope: keyword.operator.mox
    - match: \*
      scope: keyword.operator.mox
    - match: \/
      scope: keyword.operator.mox
    - match: \%
      scope: keyword.operator.mox
    - match: \<
      scope: keyword.operator.mox
    - match: '>'
      scope: keyword.operator.mox
    - match: '>='
      scope: keyword.operator.mox
    - match: '<='
      scope: keyword.operator.mox
    - match: '!='
      scope: keyword.operator.mox
    - match: '=='
      scope: keyword.operator.mox
    - match: \=
      scope: keyword.operator.assignment.mox
    - match: '&\^'
      scope: keyword.operator.mox
    - match: \&
      scope: keyword.operator.mox
    - match: \|
      scope: keyword.operator.mox
    - match: '<<'
      scope: keyword.operator.mox
    - match: '>>'
      scope: keyword.operator.mox

  match-punctuation:
    - include: match-parens
    - include: match-brackets
    - include: match-braces
    - include: match-dot
    - include: match-comma

  match-parens:
    - match: \(
      scope: punctuation.section.parens.begin.mox
      push:
        - match: \)
          scope: punctuation.section.parens.end.mox
          pop: true
        - include: main
    - match: \)
      scope: punctuation.section.parens.end.mox

  match-brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.mox
      push:
        - match: \]
          scope: punctuation.section.brackets.end.mox
          pop: true
        - include: main
    - match: \]
      scope: punctuation.section.brackets.end.mox

  match-braces:
    - match: \{
      scope: punctuation.section.braces.begin.mox
      push:
        - match: \}
          scope: punctuation.section.braces.end.mox
          pop: true
        - include: main
    - match: \}
      scope: punctuation.section.braces.end.mox

  match-dot:
    - match: \.
      scope: punctuation.accessor.dot.mox

  # Tentative, will probably remove.
  match-comma:
    - match: ','
      scope: punctuation.comma.mox comment.punctuation.comma.mox

  match-ident-prefix:
    - match: '({{ident}}){{noise}}(\.)(?={{noise}}{{ident}})'
      captures:
        1: variable.other.mox
        2: punctuation.accessor.dot.mox

  match-types:
    - include: match-ident-prefix
    - match: '{{ident}}'
      scope: storage.type.mox
      push: pop-maybe-type-block

  pop-type:
    - include: match-ident-prefix
    - match: '{{ident}}'
      scope: storage.type.mox
      set: pop-maybe-type-block
    - include: pop-before-nonblank

  pop-maybe-type-block:
    - match: \{
      scope: punctuation.section.braces.begin.mox
      set:
        - include: pop-on-brace-end
        - include: match-types
    - include: pop-before-nonblank

  pop-before-nonblank:
    - match: (?=\S)
      pop: true

  pop-on-brace-end:
    - match: \}
      scope: punctuation.section.braces.end.mox
      pop: true
